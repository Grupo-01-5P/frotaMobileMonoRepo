generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int       @id @default(autoincrement())
  nome     String
  email    String    @unique
  login    String    @unique
  senha    String
  funcao   String     // 'supervisor' ou 'analista'
  ativo    Boolean   @default(true)
  veiculos Veiculo[]  @relation("UsuarioVeiculos")
  manutencoes Manutencao[] @relation("UsuarioManutencoes")
  fasesManutencao FaseManutencao[] @relation("UsuarioFasesManutencao")
}

model Veiculo {
  id              Int        @id @default(autoincrement())
  placa           String     @unique
  marca           String
  modelo          String
  anoFabricacao   Int
  anoModelo       Int
  cor             String
  renavam         String
  chassi          String
  empresa         String
  departamento    String
  tipoVeiculo     String
  supervisorId    Int?
  supervisor      Usuario?    @relation("UsuarioVeiculos", fields: [supervisorId], references: [id])
  manutencoes     Manutencao[]
}

model Oficina {
  id           Int           @id @default(autoincrement())
  nome         String
  cnpj         String
  rua          String
  bairro       String
  cidade       String
  estado       String
  email        String
  telefone     String
  recebeEmail  Boolean
  orcamentos   Orcamento[]
  manutencoes  Manutencao[]
  fasesManutencao FaseManutencao[] @relation("OficinaFasesManutencao")
}

model Manutencao {
  id                Int        @id @default(autoincrement())
  veiculoId         Int
  veiculo           Veiculo    @relation(fields: [veiculoId], references: [id])
  descricaoProblema String
  latitude          Float?
  longitude         Float?
  urgencia          String
  status            String     @default("pendente")
  dataSolicitacao   DateTime   @default(now())
  dataAprovacao     DateTime?
  dataReprovacao    DateTime?
  dataEnviarMecanica DateTime?
  dataFinalizacao DateTime?
  motivoReprovacao  String?
  supervisorId        Int
  supervisor          Usuario    @relation("UsuarioManutencoes", fields: [supervisorId], references: [id])
  oficinaId         Int?
  oficina           Oficina?   @relation(fields: [oficinaId], references: [id])
  orcamento         Orcamento?
  fases             FaseManutencao[] @relation("ManutencaoFases")
}

enum TipoFase {
  INICIAR_VIAGEM     // Iniciar viagem até a mecânica
  DEIXAR_VEICULO     // Deixar veículo para manutenção
  SERVICO_FINALIZADO // Serviço finalizado
  RETORNO_VEICULO    // Retorno com veículo
  VEICULO_ENTREGUE   // Veículo entregue/finalizado
}

model FaseManutencao {
  id             Int           @id @default(autoincrement())
  manutencaoId   Int
  manutencao     Manutencao    @relation("ManutencaoFases", fields: [manutencaoId], references: [id])
  oficinaId      Int?
  oficina        Oficina?      @relation("OficinaFasesManutencao", fields: [oficinaId], references: [id])
  responsavelId  Int
  responsavel    Usuario       @relation("UsuarioFasesManutencao", fields: [responsavelId], references: [id])
  tipoFase       TipoFase
  dataInicio     DateTime      @default(now())
  dataFim        DateTime?
  observacoes    String?
  ativo          Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([manutencaoId, tipoFase])
}

model Orcamento {
  id                Int                @id @default(autoincrement())
  manutencaoId      Int                @unique
  manutencao        Manutencao         @relation(fields: [manutencaoId], references: [id])
  oficinaId         Int
  oficina           Oficina            @relation(fields: [oficinaId], references: [id])
  descricaoServico  String
  valorMaoObra      Float
  status            String             @default("pendente")
  dataEnvio         DateTime           @default(now())
  produtos          ProdutoOrcamento[]
}

model Produto {
  id           Int                @id @default(autoincrement())
  nome         String
  descricao    String
  precoMedio   Float
  orcamentos   ProdutoOrcamento[]
}

model ProdutoOrcamento {
  id           Int        @id @default(autoincrement())
  orcamentoId  Int
  produtoId    Int
  valorUnitario Float
  fornecedor   String

  orcamento   Orcamento @relation(fields: [orcamentoId], references: [id])
  produto     Produto   @relation(fields: [produtoId], references: [id])
}