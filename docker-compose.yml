version: '3.8'

services:
  # Database PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: postgres-frotamais
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: frotamais
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-frotamais
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  # Sua API
  api-frotamaismobile:
    build:
      context: ./apiFrotaMais
      dockerfile: Dockerfile
    container_name: api-frotamaismobile
    ports:
      - "4040:4040"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:123456@db:5432/frotamais
      RABBIT_MQ: amqp://admin:admin123@rabbitmq:5672
      PORT: 4040
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
      - monitoring
    restart: unless-stopped
    command: bash -c "npx prisma migrate dev --name generate_tables && npx prisma migrate deploy && node src/swagger.js"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=4040"
      - "prometheus.io/path=/metrics"

  formulario-orcamento:
    build:
      context: ./FormularioOrcamento
      dockerfile: Dockerfile
    container_name: formulario-orcamento-frotamais
    ports:
      - "3000:3000"
    environment:
      VITE_API_BASE_URL: http://localhost:4040
      NODE_ENV: production
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - api-frotamaismobile

      
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-frotamais
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-frotamais
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=frotamais123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Node Exporter (métricas do sistema)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-frotamais
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # cAdvisor (métricas dos containers)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-frotamais
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring
    privileged: true

  # Postgres Exporter (métricas do PostgreSQL)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-frotamais
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:123456@db:5432/frotamais?sslmode=disable"
    networks:
      - app-network
      - monitoring
    depends_on:
      - db

  # RabbitMQ Exporter (métricas do RabbitMQ)
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: rabbitmq-exporter-frotamais
    restart: unless-stopped
    ports:
      - "9419:9419"
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: admin
      RABBIT_PASSWORD: admin123
    networks:
      - app-network
      - monitoring
    depends_on:
      - rabbitmq


  rabbitmq-consumer-notifications:
    build:
      context: ./rabbitConsumer
      dockerfile: Dockerfile
    container_name: rabbitmq-consumer-notifications-frotamais
    restart: unless-stopped
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: admin
      RABBIT_PASSWORD: admin123
    networks:
      - app-network
      - monitoring
    depends_on:
      - rabbitmq


networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  pgdata:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  alertmanager_data: